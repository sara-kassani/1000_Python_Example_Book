I was preparing to teach an introductory programming class in Java. I had
taught it three times and I was getting frustrated. The failure rate in the class was too high
and, even for students who succeeded, the overall level of achievement was too low.

One of the problems I saw was the books. They were too big, with too much unnecessary
detail about Java, and not enough high-level guidance about how to program. And they all
suffered from the trap door effect: they would start out easy, proceed gradually, and then
somewhere around Chapter 5 the bottom would fall out. The students would get too much
new material, too fast, and I would spend the rest of the semester picking up the pieces.

Two weeks before the rst day of classes, I decided to write my own book. My goals were:

     Keep it short. It is better for students to read 10 pages than not read 50 pages.

     Be careful with vocabulary. I tried to minimize jargon and dene each term at rst
       use.

     Build gradually. To avoid trap doors, I took the most difcult topics and split them
       into a series of small steps.

     Focus on programming, not the programming language. I included the minimum
       useful subset of Java and left out the rest.

I needed a title, so on a whim I chose How to Think Like a Computer Scientist.

My rst version was rough, but it worked. Students did the reading, and they understood
enough that I could spend class time on the hard topics, the interesting topics and (most
important) letting the students practice.

I released the book under the GNU Free Documentation License, which allows users to
copy, modify, and distribute the book.

What happened next is the cool part. Jeff Elkner, a high school teacher in Virginia, adopted
my book and translated it into Python. He sent me a copy of his translation, and I had the
unusual experience of learning Python by reading my own book. As Green Tea Press, I
published the rst Python version in 2001.

In 2003 I started teaching at Olin College and I got to teach Python for the rst time. The
contrast with Java was striking. Students struggled less, learned more, worked on more
interesting projects, and generally had a lot more fun.
vi            Chapter 0. Preface

Since then I¡¯ve continued to develop the book, correcting errors, improving some of the
examples and adding material, especially exercises.

The result is this book, now with the less grandiose title Think Python. Some of the changes
are:

     I added a section about debugging at the end of each chapter. These sections present
       general techniques for nding and avoiding bugs, and warnings about Python pit-
       falls.

     I added more exercises, ranging from short tests of understanding to a few substantial
       projects. Most exercises include a link to my solution.

     I added a series of case studies¡ªlonger examples with exercises, solutions, and dis-
       cussion.

     I expanded the discussion of program development plans and basic design patterns.

     I added appendices about debugging and analysis of algorithms.

The second edition of Think Python has these new features:

     The book and all supporting code have been updated to Python 3.

     I added a few sections, and more details on the web, to help beginners get started
       running Python in a browser, so you don¡¯t have to deal with installing Python until
       you want to.

     For Chapter 4.1 I switched from my own turtle graphics package, called Swampy, to a
       more standard Python module, turtle, which is easier to install and more powerful.

     I added a new chapter called ¡°The Goodies¡±, which introduces some additional
       Python features that are not strictly necessary, but sometimes handy.

I hope you enjoy working with this book, and that it helps you learn to program and think
like a computer scientist, at least a little bit.

Allen B. Downey

Olin College

Acknowledgments

Many thanks to Jeff Elkner, who translated my Java book into Python, which got this
project started and introduced me to what has turned out to be my favorite language.

Thanks also to Chris Meyers, who contributed several sections to How to Think Like a Com-
puter Scientist.

Thanks to the Free Software Foundation for developing the GNU Free Documentation Li-
cense, which helped make my collaboration with Jeff and Chris possible, and Creative
Commons for the license I am using now.
  